From: Ben Hutchings <ben@decadent.org.uk>
Date: Thu, 9 Sep 2010 03:46:50 +0100
Subject: [PATCH 8/8] net: Avoid ABI change from limit for socket backlog

Move the new fields to the end of struct sock and hide them from genksyms.
---
 include/net/sock.h |   10 ++++++----
 net/core/sock.c    |    6 +++---
 net/sctp/socket.c  |    2 +-
 3 files changed, 10 insertions(+), 8 deletions(-)
 [dannf: Adjusted to apply on top of bugfix/all/net-sk_add_backlog-take-remem_alloc-into-account.patch]

diff --git a/include/net/sock.h b/include/net/sock.h
index 1f6d6aa..e5a0d8c 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -242,7 +242,6 @@ struct sock {
 	struct {
 		struct sk_buff *head;
 		struct sk_buff *tail;
-		int len;
 	} sk_backlog;
 	wait_queue_head_t	*sk_sleep;
 	struct dst_entry	*sk_dst_cache;
@@ -302,6 +301,9 @@ struct sock {
   	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);  
 	void                    (*sk_destruct)(struct sock *sk);
+#ifndef __GENKSYMS__
+	int                     sk_backlog_len;
+#endif
 };
 
 /*
@@ -579,7 +581,7 @@ static inline void sk_add_backlog(struct sock *sk, struct sk_buff *skb)
  */
 static inline bool sk_rcvqueues_full(const struct sock *sk, const struct sk_buff *skb)
 {
-	unsigned int qsize = sk->sk_backlog.len + atomic_read(&sk->sk_rmem_alloc);
+	unsigned int qsize = sk->sk_backlog_len + atomic_read(&sk->sk_rmem_alloc);
 
 	return qsize + skb->truesize > sk->sk_rcvbuf;
 }
@@ -591,7 +593,7 @@ static inline int sk_add_backlog_limited(struct sock *sk, struct sk_buff *skb)
 		return -ENOBUFS;
 
 	sk_add_backlog(sk, skb);
-	sk->sk_backlog.len += skb->truesize;
+	sk->sk_backlog_len += skb->truesize;
 	return 0;
 }
 
diff --git a/net/core/sock.c b/net/core/sock.c
index 755a614..188a326 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1122,7 +1122,7 @@ struct sock *sk_clone(const struct sock *sk, const gfp_t priority)
 		sock_lock_init(newsk);
 		bh_lock_sock(newsk);
 		newsk->sk_backlog.head	= newsk->sk_backlog.tail = NULL;
-		newsk->sk_backlog.len = 0;
+		newsk->sk_backlog_len = 0;
 
 		atomic_set(&newsk->sk_rmem_alloc, 0);
 		/*
@@ -1534,7 +1534,7 @@ static void __release_sock(struct sock *sk)
 	 * Doing the zeroing here guarantee we can not loop forever
 	 * while a wild producer attempts to flood us.
 	 */
-	sk->sk_backlog.len = 0;
+	sk->sk_backlog_len = 0;
 }
 
 /**
