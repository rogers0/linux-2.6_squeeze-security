From 22ab89ff311da2745ae52bbbf1805a6c0a79f420 Mon Sep 17 00:00:00 2001
From: Ben Hutchings <ben@decadent.org.uk>
Date: Wed, 4 Aug 2010 22:45:19 +0100
Subject: [PATCH] firmware: Avoid ABI change in 2.6.32.17

Don't change the public definition of struct firmware.  Only
request_firmware() should ever allocate it, so we can safely add
fields without callers knowing about them.
---
 drivers/base/firmware_class.c |   18 ++++++++++++------
 include/linux/firmware.h      |    2 +-
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c
index 7ab5e7a..3e1130c 100644
--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -39,6 +39,11 @@ static int loading_timeout = 60;	/* In seconds */
  * guarding for corner cases a global lock should be OK */
 static DEFINE_MUTEX(fw_lock);
 
+struct paged_firmware {
+	struct firmware fw;
+	struct page **pages;
+};
+
 struct firmware_priv {
 	char *fw_id;
 	struct completion completion;
@@ -127,12 +132,13 @@ static ssize_t firmware_loading_show(struct device *dev,
 
 static void firmware_free_data(const struct firmware *fw)
 {
+	struct page **pages = ((struct paged_firmware *)fw)->pages;
 	int i;
 	vunmap(fw->data);
-	if (fw->pages) {
+	if (pages) {
 		for (i = 0; i < PFN_UP(fw->size); i++)
-			__free_page(fw->pages[i]);
-		kfree(fw->pages);
+			__free_page(pages[i]);
+		kfree(pages);
 	}
 }
 
@@ -169,7 +175,7 @@ static ssize_t firmware_loading_store(struct device *dev,
 			break;
 		}
 		firmware_free_data(fw_priv->fw);
-		memset(fw_priv->fw, 0, sizeof(struct firmware));
+		memset(fw_priv->fw, 0, sizeof(struct paged_firmware));
 		/* If the pages are not owned by 'struct firmware' */
 		for (i = 0; i < fw_priv->nr_pages; i++)
 			__free_page(fw_priv->pages[i]);
@@ -191,7 +197,7 @@ static ssize_t firmware_loading_store(struct device *dev,
 				goto err;
 			}
 			/* Pages are now owned by 'struct firmware' */
-			fw_priv->fw->pages = fw_priv->pages;
+			((struct paged_firmware *)fw_priv->fw)->pages = fw_priv->pages;
 			fw_priv->pages = NULL;
 
 			fw_priv->page_array_size = 0;
@@ -489,7 +495,7 @@ _request_firmware(const struct firmware **firmware_p, const char *name,
 	if (!firmware_p)
 		return -EINVAL;
 
-	*firmware_p = firmware = kzalloc(sizeof(*firmware), GFP_KERNEL);
+	*firmware_p = firmware = kzalloc(sizeof(struct paged_firmware), GFP_KERNEL);
 	if (!firmware) {
 		dev_err(device, "%s: kmalloc(struct firmware) failed\n",
 			__func__);
diff --git a/include/linux/firmware.h b/include/linux/firmware.h
index 83d7510..7c6d300 100644
--- a/include/linux/firmware.h
+++ b/include/linux/firmware.h
@@ -11,7 +11,7 @@
 struct firmware {
 	size_t size;
 	const u8 *data;
-	struct page **pages;
+	/* struct page **pages; */
 };
 
 struct device;
-- 
1.7.1

