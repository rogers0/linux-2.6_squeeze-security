From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 2 Apr 2013 03:43:23 +0100
Subject: nls: Avoid ABI change for CVE-2013-1773 fix

Rename the new function, redirect to it with a macro, and keep the old
function name as a wrapper for it.  It was *possible* to use the old
function securely, just not easy.
---
 fs/nls/nls_base.c   |   10 +++++++++-
 include/linux/nls.h |    1 +
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/fs/nls/nls_base.c b/fs/nls/nls_base.c
index 0eb059ec..ff4afac 100644
--- a/fs/nls/nls_base.c
+++ b/fs/nls/nls_base.c
@@ -129,7 +129,7 @@ static inline void put_utf16(wchar_t *s, unsigned c, enum utf16_endian endian)
 	}
 }
 
-int utf8s_to_utf16s(const u8 *s, int len, enum utf16_endian endian,
+int utf8s_to_utf16s_fixed(const u8 *s, int len, enum utf16_endian endian,
 		wchar_t *pwcs, int maxlen)
 {
 	u16 *op;
@@ -169,6 +169,14 @@ int utf8s_to_utf16s(const u8 *s, int len, enum utf16_endian endian,
 	}
 	return op - pwcs;
 }
+EXPORT_SYMBOL(utf8s_to_utf16s_fixed);
+
+/* Backward binary-compatibility */
+#undef utf8s_to_utf16s
+int utf8s_to_utf16s(const u8 *s, int len, wchar_t *pwcs)
+{
+	return utf8s_to_utf16s_fixed(s, len, UTF16_HOST_ENDIAN, pwcs, INT_MAX);
+}
 EXPORT_SYMBOL(utf8s_to_utf16s);
 
 static inline unsigned long get_utf16(unsigned c, enum utf16_endian endian)
diff --git a/include/linux/nls.h b/include/linux/nls.h
index 5dc635f..fe20a33 100644
--- a/include/linux/nls.h
+++ b/include/linux/nls.h
@@ -52,6 +52,7 @@ extern struct nls_table *load_nls_default(void);
 
 extern int utf8_to_utf32(const u8 *s, int len, unicode_t *pu);
 extern int utf32_to_utf8(unicode_t u, u8 *s, int maxlen);
+#define utf8s_to_utf16s utf8s_to_utf16s_fixed
 extern int utf8s_to_utf16s(const u8 *s, int len,
 		enum utf16_endian endian, wchar_t *pwcs, int maxlen);
 extern int utf16s_to_utf8s(const wchar_t *pwcs, int len,
