From: Ben Hutchings <ben@decadent.org.uk>
Subject: tracing: Avoid ABI change in 3.10.7
Date: Sat, 17 Aug 2013 00:08:43 +0200
Forwarded: not-needed

commit 2d7ddf0a8fa2 ('tracing: Fix fields of struct trace_iterator
that are zeroed by mistake', commit ed5467da0e36 upstream) rearranged
struct trace_iterator unnecessarilly.  Change the memset() to avoid
those fields.

--- a/include/linux/ftrace_event.h
+++ b/include/linux/ftrace_event.h
@@ -78,11 +78,6 @@ struct trace_iterator {
 	/* trace_seq for __print_flags() and __print_symbolic() etc. */
 	struct trace_seq	tmp_seq;
 
-	cpumask_var_t		started;
-
-	/* it's true when current open file is snapshot */
-	bool			snapshot;
-
 	/* The below is zeroed out in pipe_read */
 	struct trace_seq	seq;
 	struct trace_entry	*ent;
@@ -95,7 +90,10 @@ struct trace_iterator {
 	loff_t			pos;
 	long			idx;
 
-	/* All new field here will be zeroed out in pipe_read */
+	cpumask_var_t		started;
+
+	/* it's true when current open file is snapshot */
+	bool			snapshot;
 };
 
 enum trace_iter_flags {
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -4161,9 +4161,9 @@ waitagain:
 	if (cnt >= PAGE_SIZE)
 		cnt = PAGE_SIZE - 1;
 
-	/* reset all but tr, trace, and overruns */
+	/* reset all but tr, trace, overruns, started, snapshot */
 	memset(&iter->seq, 0,
-	       sizeof(struct trace_iterator) -
+	       offsetof(struct trace_iterator, started) -
 	       offsetof(struct trace_iterator, seq));
 	cpumask_clear(iter->started);
 	iter->pos = -1;
