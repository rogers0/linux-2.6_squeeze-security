From: Ben Hutchings <ben@decadent.org.uk>
Date: Thu, 9 Sep 2010 03:46:50 +0100
Subject: [PATCH 8/8] net: Avoid ABI change from limit for socket backlog

Move the new fields to the end of struct sock and hide them from genksyms.
---
 include/net/sock.h |   10 ++++++----
 net/core/sock.c    |    6 +++---
 net/sctp/socket.c  |    2 +-
 3 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index d04a1ab..e85971f 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -242,8 +242,6 @@ struct sock {
 	struct {
 		struct sk_buff *head;
 		struct sk_buff *tail;
-		int len;
-		int limit;
 	} sk_backlog;
 	wait_queue_head_t	*sk_sleep;
 	struct dst_entry	*sk_dst_cache;
@@ -303,6 +301,10 @@ struct sock {
   	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);  
 	void                    (*sk_destruct)(struct sock *sk);
+#ifndef __GENKSYMS__
+	int			sk_backlog_len;
+	int			sk_backlog_limit;
+#endif
 };
 
 /*
@@ -578,11 +580,11 @@ static inline void sk_add_backlog(struct sock *sk, struct sk_buff *skb)
 /* The per-socket spinlock must be held here. */
 static inline int sk_add_backlog_limited(struct sock *sk, struct sk_buff *skb)
 {
-	if (sk->sk_backlog.len >= max(sk->sk_backlog.limit, sk->sk_rcvbuf << 1))
+	if (sk->sk_backlog_len >= max(sk->sk_backlog_limit, sk->sk_rcvbuf << 1))
 		return -ENOBUFS;
 
 	sk_add_backlog(sk, skb);
-	sk->sk_backlog.len += skb->truesize;
+	sk->sk_backlog_len += skb->truesize;
 	return 0;
 }
 
diff --git a/net/core/sock.c b/net/core/sock.c
index 5797dab..31e02d3 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1118,7 +1118,7 @@ struct sock *sk_clone(const struct sock *sk, const gfp_t priority)
 		sock_lock_init(newsk);
 		bh_lock_sock(newsk);
 		newsk->sk_backlog.head	= newsk->sk_backlog.tail = NULL;
-		newsk->sk_backlog.len = 0;
+		newsk->sk_backlog_len = 0;
 
 		atomic_set(&newsk->sk_rmem_alloc, 0);
 		/*
@@ -1527,7 +1527,7 @@ static void __release_sock(struct sock *sk)
 	 * Doing the zeroing here guarantee we can not loop forever
 	 * while a wild producer attempts to flood us.
 	 */
-	sk->sk_backlog.len = 0;
+	sk->sk_backlog_len = 0;
 }
 
 /**
@@ -1860,7 +1860,7 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 	sk->sk_allocation	=	GFP_KERNEL;
 	sk->sk_rcvbuf		=	sysctl_rmem_default;
 	sk->sk_sndbuf		=	sysctl_wmem_default;
-	sk->sk_backlog.limit	=	sk->sk_rcvbuf << 1;
+	sk->sk_backlog_limit	=	sk->sk_rcvbuf << 1;
 	sk->sk_state		=	TCP_CLOSE;
 	sk_set_socket(sk, sock);
 
diff --git a/net/sctp/socket.c b/net/sctp/socket.c
index 374dfe5..84ab523 100644
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@ -3720,7 +3720,7 @@ SCTP_STATIC int sctp_init_sock(struct sock *sk)
 	percpu_counter_inc(&sctp_sockets_allocated);
 
 	/* Set socket backlog limit. */
-	sk->sk_backlog.limit = sysctl_sctp_rmem[1];
+	sk->sk_backlog_limit = sysctl_sctp_rmem[1];
 
 	local_bh_disable();
 	sock_prot_inuse_add(sock_net(sk), sk->sk_prot, 1);
-- 
1.7.1

