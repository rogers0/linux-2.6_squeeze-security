From: J. R. Okajima <hooanon05@yahoo.co.jp>
Date: Tue, 29 Jun 2010 14:32:26 +0900
Subject: [PATCH 4/4] aufs: bugfix, separate the workqueue for preprocessing mmap

commit b0372e021a903e33f39dd515ceebd8506b1c52aa in aufs2-2.6

variation of common AB-BA deadlock problem.

ProcessA:
- aufs_mmap
  + pre-process with using a workqueue
  + wait until return from the workqueue

Workqueue task for ProcessA:
- acquire aufs rwsem

Processb
- lookup or readdir in aufs
  + acquire aufs rwsem
  + assign a new inode number
  + write the value to the XINO file using a workqueue
  + wait until return from the workqueue

Since the workqueue handles the request one by one, both of processA and
B waits forever.

This bug was introduced by the commit
d986fa5 2010-03-08
	aufs: bugfix, another approach to keep the lock order of mmap_sem
which is the last added workqueue task.
And this is the only one task which acquires such lock in workqueue.
To fix it, introduce another workqueue which is for preprocessing mmap only.
This commit will make the approach more ugly, I don't have another option.

Reported-by: Oliver Welter <mail@oliwel.de>
Signed-off-by: J. R. Okajima <hooanon05@yahoo.co.jp>
[bwh: Adjust context for Debian's 2.6.32]
---
 fs/aufs/f_op.c            |    2 +-
 fs/aufs/wkq.c             |   62 ++++++++++++++++++++++++++++++++++++--------
 fs/aufs/wkq.h             |   13 ++++++++-
 include/linux/aufs_type.h |    1 +
 4 files changed, 64 insertions(+), 14 deletions(-)

diff --git a/fs/aufs/f_op.c b/fs/aufs/f_op.c
index 6abec9c..99982e5 100644
--- a/fs/aufs/f_op.c
+++ b/fs/aufs/f_op.c
@@ -666,7 +666,7 @@ static int aufs_mmap(struct file *file, struct vm_area_struct *vma)
 		.errp		= &err
 	};
 
-	wkq_err = au_wkq_wait(au_call_mmap_pre, &args);
+	wkq_err = au_wkq_wait_pre(au_call_mmap_pre, &args);
 	if (unlikely(wkq_err))
 		err = wkq_err;
 	if (unlikely(err))
diff --git a/fs/aufs/wkq.c b/fs/aufs/wkq.c
index 307b1c4..c867e70 100644
--- a/fs/aufs/wkq.c
+++ b/fs/aufs/wkq.c
@@ -24,8 +24,23 @@
 #include <linux/module.h>
 #include "aufs.h"
 
-/* internal workqueue named AUFS_WKQ_NAME */
-static struct workqueue_struct *au_wkq;
+/* internal workqueue named AUFS_WKQ_NAME and AUFS_WKQ_PRE_NAME */
+enum {
+	AuWkq_INORMAL,
+	AuWkq_IPRE
+};
+
+static struct {
+	char *name;
+	struct workqueue_struct *wkq;
+} au_wkq[] = {
+	[AuWkq_INORMAL] = {
+		.name = AUFS_WKQ_NAME
+	},
+	[AuWkq_IPRE] = {
+		.name = AUFS_WKQ_PRE_NAME
+	}
+};
 
 struct au_wkinfo {
 	struct work_struct wk;
@@ -96,29 +111,34 @@ static void au_wkq_comp_free(struct completion *comp __maybe_unused)
 }
 #endif /* 4KSTACKS */
 
-static void au_wkq_run(struct au_wkinfo *wkinfo, int do_wait)
+static void au_wkq_run(struct au_wkinfo *wkinfo, unsigned int flags)
 {
+	struct workqueue_struct *wkq;
+
 	au_dbg_verify_kthread();
 	INIT_WORK(&wkinfo->wk, wkq_func);
-	if (do_wait)
-		queue_work(au_wkq, &wkinfo->wk);
-	else
+	if (flags & AuWkq_WAIT) {
+		wkq = au_wkq[AuWkq_INORMAL].wkq;
+		if (flags & AuWkq_PRE)
+			wkq = au_wkq[AuWkq_IPRE].wkq;
+		queue_work(wkq, &wkinfo->wk);
+	} else
 		schedule_work(&wkinfo->wk);
 }
 
-int au_wkq_wait(au_wkq_func_t func, void *args)
+int au_wkq_do_wait(unsigned int flags, au_wkq_func_t func, void *args)
 {
 	int err;
 	AuWkqCompDeclare(comp);
 	struct au_wkinfo wkinfo = {
-		.flags	= AuWkq_WAIT,
+		.flags	= flags,
 		.func	= func,
 		.args	= args
 	};
 
 	err = au_wkq_comp_alloc(&wkinfo, &comp);
 	if (!err) {
-		au_wkq_run(&wkinfo, AuWkq_WAIT);
+		au_wkq_run(&wkinfo, flags);
 		/* no timeout, no interrupt */
 		wait_for_completion(wkinfo.comp);
 		au_wkq_comp_free(comp);
@@ -170,11 +190,29 @@ void au_nwt_init(struct au_nowait_tasks *nwt)
 
 void au_wkq_fin(void)
 {
-	destroy_workqueue(au_wkq);
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(au_wkq); i++)
+		if (au_wkq[i].wkq)
+			destroy_workqueue(au_wkq[i].wkq);
 }
 
 int __init au_wkq_init(void)
 {
-	au_wkq = create_workqueue(AUFS_WKQ_NAME);
-	return 0;
+	int err, i;
+
+	err = 0;
+	for (i = 0; !err && i < ARRAY_SIZE(au_wkq); i++) {
+		au_wkq[i].wkq = create_workqueue(au_wkq[i].name);
+		if (IS_ERR(au_wkq[i].wkq))
+			err = PTR_ERR(au_wkq[i].wkq);
+		else if (!au_wkq[i].wkq)
+			err = -ENOMEM;
+		if (unlikely(err))
+			au_wkq[i].wkq = NULL;
+	}
+	if (unlikely(err))
+		au_wkq_fin();
+
+	return err;
 }
diff --git a/fs/aufs/wkq.h b/fs/aufs/wkq.h
index 3fe36b3..3e6f5b5 100644
--- a/fs/aufs/wkq.h
+++ b/fs/aufs/wkq.h
@@ -48,12 +48,13 @@ typedef void (*au_wkq_func_t)(void *args);
 
 /* wkq flags */
 #define AuWkq_WAIT	1
+#define AuWkq_PRE	(1 << 1)
 #define au_ftest_wkq(flags, name)	((flags) & AuWkq_##name)
 #define au_fset_wkq(flags, name)	{ (flags) |= AuWkq_##name; }
 #define au_fclr_wkq(flags, name)	{ (flags) &= ~AuWkq_##name; }
 
 /* wkq.c */
-int au_wkq_wait(au_wkq_func_t func, void *args);
+int au_wkq_do_wait(unsigned int flags, au_wkq_func_t func, void *args);
 int au_wkq_nowait(au_wkq_func_t func, void *args, struct super_block *sb);
 void au_nwt_init(struct au_nowait_tasks *nwt);
 int __init au_wkq_init(void);
@@ -61,6 +62,16 @@ void au_wkq_fin(void);
 
 /* ---------------------------------------------------------------------- */
 
+static inline int au_wkq_wait_pre(au_wkq_func_t func, void *args)
+{
+	return au_wkq_do_wait(AuWkq_WAIT | AuWkq_PRE, func, args);
+}
+
+static inline int au_wkq_wait(au_wkq_func_t func, void *args)
+{
+	return au_wkq_do_wait(AuWkq_WAIT, func, args);
+}
+
 static inline int au_test_wkq(struct task_struct *tsk)
 {
 	return !tsk->mm
diff --git a/include/linux/aufs_type.h b/include/linux/aufs_type.h
index 3ca3948..b13cfc1 100644
--- a/include/linux/aufs_type.h
+++ b/include/linux/aufs_type.h
@@ -75,6 +75,7 @@ typedef __s16 aufs_bindex_t;
 #define AUFS_RDBLK_DEF		512 /* bytes */
 #define AUFS_RDHASH_DEF		32
 #define AUFS_WKQ_NAME		AUFS_NAME "d"
+#define AUFS_WKQ_PRE_NAME	AUFS_WKQ_NAME "_pre"
 #define AUFS_MFS_SECOND_DEF	30 /* seconds */
 #define AUFS_PLINK_WARN		100 /* number of plinks */
 
-- 
1.7.2.3

