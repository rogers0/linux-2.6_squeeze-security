diff --git a/arch/arm/mach-orion5x/lsproduo-setup.c b/arch/arm/mach-orion5x/lsproduo-setup.c
new file mode 100644
index 0000000..b4f13a7
--- /dev/null
+++ b/arch/arm/mach-orion5x/lsproduo-setup.c
@@ -0,0 +1,441 @@
+/*
+ * arch/arm/mach-orion5x/lsproduo-setup.c
+ *
+ * Source taken from arch/arm/mach-orion5x/lsmini-setup.c
+ * Contributor: Manuel Bernhardt <prodigy7@gmail.com>
+ * Contributor: Matt Gomboc <gomboc0@gmail.com>
+ * Maintainer:  Roger Yan <roger@localet.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/pci.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mv643xx_eth.h>
+#include <linux/leds.h>
+#include <linux/gpio_keys.h>
+#include <linux/gpio-fan.h>
+#include <linux/input.h>
+#include <linux/i2c.h>
+#include <linux/ata_platform.h>
+#include <asm/mach-types.h>
+#include <linux/gpio.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/uaccess.h>
+#include "common.h"
+#include "mpp.h"
+#include "include/mach/system.h"
+
+/*****************************************************************************
+ * Linkstation Pro Duo Info
+ ****************************************************************************/
+
+/*
+ * 256K NOR flash Device bus boot chip select
+ */
+
+#define LSPRODUO_NOR_BOOT_BASE 0xf4000000
+#define LSPRODUO_NOR_BOOT_SIZE SZ_256K
+
+/*****************************************************************************
+ * 256KB NOR Flash on BOOT Device
+ ****************************************************************************/
+
+static struct physmap_flash_data lsproduo_nor_flash_data = {
+	.width		= 1,
+};
+
+static struct resource lsproduo_nor_flash_resource = {
+	.flags	= IORESOURCE_MEM,
+	.start	= LSPRODUO_NOR_BOOT_BASE,
+	.end	= LSPRODUO_NOR_BOOT_BASE + LSPRODUO_NOR_BOOT_SIZE - 1,
+};
+
+static struct platform_device lsproduo_nor_flash = {
+	.name			= "physmap-flash",
+	.id			= 0,
+	.dev		= {
+		.platform_data  = &lsproduo_nor_flash_data,
+	},
+	.num_resources		= 1,
+	.resource		= &lsproduo_nor_flash_resource,
+};
+
+/*****************************************************************************
+ * Ethernet
+ ****************************************************************************/
+
+static struct mv643xx_eth_platform_data lsproduo_eth_data = {
+	.phy_addr	= 8,
+};
+
+/*****************************************************************************
+ * RTC 5C372a on I2C bus
+ ****************************************************************************/
+
+static struct i2c_board_info __initdata lsproduo_i2c_rtc = {
+	I2C_BOARD_INFO("rs5c372a", 0x32),
+};
+
+/*****************************************************************************
+ * LEDs attached to GPIO
+ ****************************************************************************/
+
+#define LSPRODUO_GPIO_LED_ALARM	2
+#define LSPRODUO_GPIO_LED_INFO	3
+#define LSPRODUO_GPIO_LED_PWR	0
+
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+#define LSPRODUO_GPIO_LED_FUNC	18
+#endif
+
+static struct gpio_led lsproduo_led_pins[] = {
+	{
+		.name	   = "alarm:red",
+		.gpio	   = LSPRODUO_GPIO_LED_ALARM,
+		.active_low     = 1,
+	}, {
+		.name	   = "info:amber",
+		.gpio	   = LSPRODUO_GPIO_LED_INFO,
+		.active_low     = 1,
+	}, {
+		.name	   = "power:green",
+		.gpio	   = LSPRODUO_GPIO_LED_PWR,
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+	}, {
+		.name	   = "func:blue",
+		.gpio	   = LSPRODUO_GPIO_LED_FUNC,
+		.active_low     = 1,
+#endif
+	},
+};
+
+static struct gpio_led_platform_data lsproduo_led_data = {
+	.leds      = lsproduo_led_pins,
+	.num_leds	= ARRAY_SIZE(lsproduo_led_pins),
+};
+
+static struct platform_device lsproduo_leds = {
+	.name   = "leds-gpio",
+	.id     = -1,
+	.dev    = {
+		.platform_data  = &lsproduo_led_data,
+	},
+};
+
+/****************************************************************************
+ * GPIO Attached Keys
+ ****************************************************************************/
+
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+#define LSPRODUO_GPIO_KEY_POWER		8
+#define LSPRODUO_GPIO_KEY_AUTOPOWER	10
+#endif
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+#define LSPRODUO_GPIO_KEY_POWER		10
+#define LSPRODUO_GPIO_KEY_AUTOPOWER	22
+#define LSPRODUO_GPIO_KEY_FUNC		8
+#endif
+
+#define LSPRODUO_SW_POWER			0x00
+#define LSPRODUO_SW_AUTOPOWER		0x01
+
+static struct gpio_keys_button lsproduo_buttons[] = {
+	{
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+		 .code	= KEY_OPTION,
+		 .gpio	= LSPRODUO_GPIO_KEY_FUNC,
+		 .desc	= "Function Button",
+		 .active_low	= 1,
+	}, {
+#endif
+		 .type		= EV_SW,
+		 .code	= LSPRODUO_SW_POWER,
+		 .gpio	= LSPRODUO_GPIO_KEY_POWER,
+		 .desc	= "Power-on Switch",
+		 .active_low	= 1,
+	}, {
+		 .type		= EV_SW,
+		 .code	   = LSPRODUO_SW_AUTOPOWER,
+		 .gpio	   = LSPRODUO_GPIO_KEY_AUTOPOWER,
+		 .desc	   = "Power-auto Switch",
+		 .active_low	= 1,
+	},
+};
+
+static struct gpio_keys_platform_data lsproduo_button_data = {
+	.buttons	 = lsproduo_buttons,
+	.nbuttons	= ARRAY_SIZE(lsproduo_buttons),
+};
+
+static struct platform_device lsproduo_button_device = {
+	.name	   = "gpio-keys",
+	.id	     = -1,
+	.num_resources  = 0,
+	.dev	    = {
+		.platform_data  = &lsproduo_button_data,
+	},
+};
+
+/****************************************************************************
+ * GPIO Attached Fan
+ ****************************************************************************/
+
+/* Define max char len */
+#define MAX_LEN 8
+
+#define LSPRODUO_GPIO_FAN_LOW		17
+#define LSPRODUO_GPIO_FAN_HIGH		14
+
+static char lsproduo_fan_state[MAX_LEN];
+
+#ifdef CONFIG_PROC_FS
+static int proc_lsproduo_fan_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "state: %s\n", lsproduo_fan_state);
+	return 0;
+}
+
+static int proc_lsproduo_fan_open( struct inode *inode, struct file *file)
+{
+	return single_open(file, proc_lsproduo_fan_show, NULL);
+}
+
+static ssize_t proc_lsproduo_fan_write(struct file *file, const char __user *buffer, size_t count, loff_t *pos)
+{
+	int len, ret;
+	char *ptr, tState[MAX_LEN];
+
+	if (count > MAX_LEN )
+		len = MAX_LEN;
+	else
+		len = count;
+
+	ret = copy_from_user(tState, buffer, len);
+	if(ret < 0)
+	{
+		printk(KERN_ERR "%s: Setting fan speed failed\n", "lsproduo");
+		return -EFAULT;
+	}
+
+	ptr = strrchr(tState, '\n');
+	if(ptr) *ptr = '\0';
+
+	if (strcasecmp(tState, "off") == 0)
+	{
+		printk(KERN_DEBUG "%s: set fan off\n", "lsproduo");
+		sprintf(lsproduo_fan_state, "off");
+		gpio_set_value(LSPRODUO_GPIO_FAN_LOW, 1);
+		gpio_set_value(LSPRODUO_GPIO_FAN_HIGH, 1);
+	} else if (strcasecmp(tState, "slow") == 0)
+	{
+		printk(KERN_DEBUG "%s: set fan slow\n", "lsproduo");
+		sprintf(lsproduo_fan_state, "slow");
+		gpio_set_value(LSPRODUO_GPIO_FAN_LOW, 1);
+		gpio_set_value(LSPRODUO_GPIO_FAN_HIGH, 0);
+	} else if (strcasecmp(tState, "fast") == 0)
+	{
+		printk(KERN_DEBUG "%s: set fan fast\n", "lsproduo");
+		sprintf(lsproduo_fan_state, "fast");
+		gpio_set_value(LSPRODUO_GPIO_FAN_LOW, 0);
+		gpio_set_value(LSPRODUO_GPIO_FAN_HIGH, 1);
+	} else if (strcasecmp(tState, "full") == 0)
+	{
+		printk(KERN_DEBUG "%s: set fan full\n", "lsproduo");
+		sprintf(lsproduo_fan_state, "full");
+		gpio_set_value(LSPRODUO_GPIO_FAN_LOW, 0);
+		gpio_set_value(LSPRODUO_GPIO_FAN_HIGH, 0);
+	} else
+	{
+		printk(KERN_ERR "%s: unknown fan speed given\n", "lsproduo");
+	}
+
+	lsproduo_fan_state[len] = '\0';
+
+	return len;
+}
+
+static const struct file_operations proc_fan_status_ops = {
+	.open	= proc_lsproduo_fan_open,
+	.read	= seq_read,
+	.llseek	= seq_lseek,
+	.write	= proc_lsproduo_fan_write,
+	.release= single_release,
+};
+#endif
+
+/*****************************************************************************
+ * SATA
+ ****************************************************************************/
+static struct mv_sata_platform_data lsproduo_sata_data = {
+	.n_ports	= 2,
+};
+
+
+/*****************************************************************************
+ * Linkstation Pro Duo specific power off method: reboot
+ ****************************************************************************/
+/*
+ * On the Linkstation Pro Duo, the shutdown process is following:
+ * - Userland monitors key events until the power switch goes to off position
+ * - The board reboots
+ * - U-boot starts and goes into an idle mode waiting for the user
+ *   to move the switch to ON position
+ */
+
+static void lsproduo_power_off(void)
+{
+	arch_reset(0, NULL);
+}
+
+
+/*****************************************************************************
+ * General Setup
+ ****************************************************************************/
+#define LSPRODUO_GPIO_HDD_POWER0	1
+#define LSPRODUO_GPIO_USB_POWER		9
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+#define LSPRODUO_GPIO_POWER			8
+#define LSPRODUO_GPIO_AUTO_POWER	10
+#endif
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+#define LSPRODUO_GPIO_POWER			10
+#define LSPRODUO_GPIO_USB_POWER2	19
+#define LSPRODUO_GPIO_AUTO_POWER	22
+#endif
+
+static struct orion5x_mpp_mode lsproduo_mpp_modes[] __initdata = {
+	{  0, MPP_GPIO },	/* LED_PWR */
+	{  1, MPP_GPIO },	/* HDD_PWR */
+	{  2, MPP_GPIO },	/* LED_ALARM */
+	{  3, MPP_GPIO },	/* LED_INFO */
+	{  4, MPP_UNUSED },
+	{  5, MPP_UNUSED },
+	{  6, MPP_GPIO },	/* FAN_LCK */
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+	{  7, MPP_GPIO },	/* INIT */
+	{  8, MPP_GPIO },	/* POWER */
+#endif
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+	{  7, MPP_UNUSED },
+	{  8, MPP_GPIO },	/* FUNC */
+#endif
+	{  9, MPP_GPIO },	/* USB_PWR */
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+	{ 10, MPP_GPIO },	/* AUTO_POWER */
+#endif
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+	{ 10, MPP_GPIO },	/* POWER */
+#endif
+	{ 11, MPP_UNUSED },	/* LED_ETH dummy */
+	{ 12, MPP_UNUSED },
+	{ 13, MPP_UNUSED },
+	{ 14, MPP_GPIO },	/* FAN_HIGH */
+	{ 15, MPP_UNUSED },
+	{ 16, MPP_UNUSED },
+	{ 17, MPP_GPIO },	/* FAN_LOW */
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+	{ 18, MPP_UNUSED },
+	{ 19, MPP_UNUSED },
+#endif
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+	{ 18, MPP_GPIO },	/* LED_FUNC */
+	{ 19, MPP_GPIO },	/* USB_PWR2 */
+	{ 20, MPP_UNUSED },
+	{ 21, MPP_UNUSED },
+	{ 22, MPP_GPIO },	/* AUTO_POWER */
+#endif
+	{ -1 },
+};
+
+static void __init lsproduo_init(void)
+{
+	/*
+	 * Setup basic Orion functions. Need to be called early.
+	 */
+	orion5x_init();
+
+	orion5x_mpp_conf(lsproduo_mpp_modes);
+
+	/*
+	 * Configure peripherals.
+	 */
+	orion5x_ehci0_init();
+	orion5x_ehci1_init();
+	orion5x_eth_init(&lsproduo_eth_data);
+	orion5x_i2c_init();
+	orion5x_sata_init(&lsproduo_sata_data);
+	orion5x_uart0_init();
+	orion5x_xor_init();
+
+	orion5x_setup_dev_boot_win(LSPRODUO_NOR_BOOT_BASE,
+				LSPRODUO_NOR_BOOT_SIZE);
+	platform_device_register(&lsproduo_nor_flash);
+
+	platform_device_register(&lsproduo_button_device);
+
+	platform_device_register(&lsproduo_leds);
+
+	i2c_register_board_info(0, &lsproduo_i2c_rtc, 1);
+
+	/* enable USB power */
+	gpio_set_value(LSPRODUO_GPIO_USB_POWER, 1);
+
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+	gpio_set_value(LSPRODUO_GPIO_USB_POWER2, 1);
+#endif
+
+	printk(KERN_INFO "Buffalo Linkstation Pro Duo fan driver loaded\n");
+	sprintf(lsproduo_fan_state, "fast");
+	gpio_set_value(LSPRODUO_GPIO_FAN_LOW, 0);
+	gpio_set_value(LSPRODUO_GPIO_FAN_HIGH, 1);
+
+#ifdef CONFIG_PROC_FS
+	proc_mkdir( "linkstation", NULL);
+	proc_mkdir( "linkstation/gpio", NULL);
+	if( ! proc_create( "linkstation/gpio/fan", S_IWUSR | S_IRUGO, NULL, &proc_fan_status_ops)) {
+		printk( KERN_INFO "Error creating linkstation proc entry.\n");
+	}
+#endif
+
+	/* register power-off method */
+	pm_power_off = lsproduo_power_off;
+
+	pr_info("%s: finished\n", __func__);
+}
+
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV1
+MACHINE_START(LINKSTATION_PRODUO, "Buffalo Linkstation Pro Duo - Revision 1")
+	/* Maintainer: Manuel Bernhardt <prodigy7@gmail.com> */
+	.phys_io	= ORION5X_REGS_PHYS_BASE,
+	.io_pg_offst	= ((ORION5X_REGS_VIRT_BASE) >> 18) & 0xFFFC,
+	.boot_params	= 0x00000100,
+	.init_machine	= lsproduo_init,
+	.map_io		= orion5x_map_io,
+	.init_irq	= orion5x_init_irq,
+	.timer		= &orion5x_timer,
+	.fixup		= tag_fixup_mem32,
+MACHINE_END
+#endif
+
+#ifdef CONFIG_MACH_LINKSTATION_PRODUO_REV2
+MACHINE_START(LINKSTATION_PRODUO, "Buffalo Linkstation Pro Duo - Revision 2")
+	/* Maintainer: Manuel Bernhardt <prodigy7@gmail.com> */
+	.phys_io	= ORION5X_REGS_PHYS_BASE,
+	.io_pg_offst	= ((ORION5X_REGS_VIRT_BASE) >> 18) & 0xFFFC,
+	.boot_params	= 0x00000100,
+	.init_machine	= lsproduo_init,
+	.map_io		= orion5x_map_io,
+	.init_irq	= orion5x_init_irq,
+	.timer		= &orion5x_timer,
+	.fixup		= tag_fixup_mem32,
+MACHINE_END
+#endif
